/* tslint:disable */
/* eslint-disable */
/**
 * Boggle Solver API
 * This is a boggle solver API
 *
 * The version of the OpenAPI document: 1.0.0-oas3
 * Contact: nsinghvi@umich.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GetBoggleBoardRequest {
    fileName?: Blob;
}

export interface SolveBoggleRequest {
    requestBody: Array<Array<string>>;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * takes in a file (picture of boggle board and returns a 2d array boggle board
     */
    async getBoggleBoardRaw(requestParameters: GetBoggleBoardRequest): Promise<runtime.ApiResponse<Array<Array<string>>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.fileName !== undefined) {
            formParams.append('fileName', requestParameters.fileName as any);
        }

        const response = await this.request({
            path: `/get-boggle-board`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * takes in a file (picture of boggle board and returns a 2d array boggle board
     */
    async getBoggleBoard(requestParameters: GetBoggleBoardRequest): Promise<Array<Array<string>>> {
        const response = await this.getBoggleBoardRaw(requestParameters);
        return await response.value();
    }

    /**
     * returns the valid words for a 2d array representing a boggle board
     */
    async solveBoggleRaw(requestParameters: SolveBoggleRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling solveBoggle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/solve-boggle`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * returns the valid words for a 2d array representing a boggle board
     */
    async solveBoggle(requestParameters: SolveBoggleRequest): Promise<Array<string>> {
        const response = await this.solveBoggleRaw(requestParameters);
        return await response.value();
    }

}
